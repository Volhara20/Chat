// <auto-generated />
using System;
using Chat.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Chat.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220901210630_AddMessageTable")]
    partial class AddMessageTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Chat.Models.DboModels.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33e26927-34e7-412b-9d11-b0f93a533bb6"),
                            Created = new DateTime(2022, 9, 1, 17, 47, 50, 0, DateTimeKind.Unspecified),
                            GroupName = "TestGroup1"
                        },
                        new
                        {
                            Id = new Guid("56775ee9-6735-485e-9283-c9ab65831c64"),
                            Created = new DateTime(2022, 9, 1, 17, 48, 50, 0, DateTimeKind.Unspecified),
                            GroupName = "TestGroup2"
                        });
                });

            modelBuilder.Entity("Chat.Models.DboModels.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisibleForOwner")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ReplyMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ToUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ReplyMessageId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Chat.Models.DboModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7aaab85f-fd13-4ea3-bda6-6397100ae230"),
                            Created = new DateTime(2022, 9, 1, 17, 45, 50, 0, DateTimeKind.Unspecified),
                            UserName = "olka"
                        },
                        new
                        {
                            Id = new Guid("d0845b19-dd1f-4459-9890-47e341e5fd15"),
                            Created = new DateTime(2022, 9, 1, 17, 46, 50, 0, DateTimeKind.Unspecified),
                            UserName = "test"
                        });
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.Property<Guid>("GroupsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserGroupsRelationship", (string)null);

                    b.HasData(
                        new
                        {
                            GroupsId = new Guid("33e26927-34e7-412b-9d11-b0f93a533bb6"),
                            UsersId = new Guid("7aaab85f-fd13-4ea3-bda6-6397100ae230")
                        },
                        new
                        {
                            GroupsId = new Guid("56775ee9-6735-485e-9283-c9ab65831c64"),
                            UsersId = new Guid("7aaab85f-fd13-4ea3-bda6-6397100ae230")
                        },
                        new
                        {
                            GroupsId = new Guid("33e26927-34e7-412b-9d11-b0f93a533bb6"),
                            UsersId = new Guid("d0845b19-dd1f-4459-9890-47e341e5fd15")
                        });
                });

            modelBuilder.Entity("Chat.Models.DboModels.Message", b =>
                {
                    b.HasOne("Chat.Models.DboModels.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chat.Models.DboModels.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("Chat.Models.DboModels.Message", "ReplyMessage")
                        .WithMany()
                        .HasForeignKey("ReplyMessageId");

                    b.HasOne("Chat.Models.DboModels.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId");

                    b.Navigation("FromUser");

                    b.Navigation("Group");

                    b.Navigation("ReplyMessage");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.HasOne("Chat.Models.DboModels.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chat.Models.DboModels.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
